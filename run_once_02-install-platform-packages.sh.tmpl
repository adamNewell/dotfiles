#!/bin/bash
# Platform-specific package installation
# Installs base packages using the native package manager

# Don't exit on error - handle errors explicitly
set -o pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warn() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}" >&2; }

{{- if eq .chezmoi.os "darwin" }}
# macOS - Use Homebrew
info "🍎 Installing macOS packages via Homebrew..."

# Install Homebrew if not present
if ! command -v brew >/dev/null 2>&1; then
    info "Installing Homebrew..."

    # Download and verify Homebrew installer
    readonly HOMEBREW_INSTALLER="/tmp/homebrew_install_$$.sh"
    trap 'rm -f "${HOMEBREW_INSTALLER}"' EXIT

    if ! curl -fsSL "https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh" -o "${HOMEBREW_INSTALLER}"; then
        error "Failed to download Homebrew installer"
        exit 1
    fi

    # Basic verification
    if ! head -n1 "${HOMEBREW_INSTALLER}" | grep -q '^#!/bin/bash'; then
        error "Downloaded file does not appear to be a valid shell script"
        exit 1
    fi

    /bin/bash "${HOMEBREW_INSTALLER}"

    # Add to PATH for this session
    if [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f "/usr/local/bin/brew" ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
    fi
fi

# Install from templated Brewfile
brewfile_template="{{ .chezmoi.sourceDir }}/os/macos/Brewfile.tmpl"
if [[ -f "$brewfile_template" ]]; then
    info "Processing templated Brewfile..."
    # Process the template and create a temporary Brewfile
    if chezmoi execute-template < "$brewfile_template" > /tmp/Brewfile; then
        info "Installing packages from templated Brewfile..."
        # Don't fail if some packages fail to install
        if brew bundle --file=/tmp/Brewfile; then
            success "Homebrew packages installed"
        else
            warn "Some Homebrew packages failed to install - check output above"
            info "You can re-run 'chezmoi apply' to retry installation"
        fi
        rm -f /tmp/Brewfile
    else
        warn "Failed to process Brewfile template"
        info "Skipping Homebrew package installation"
    fi
else
    warn "Templated Brewfile not found at $brewfile_template"
    info "Skipping Homebrew package installation"
fi

{{- else if eq .chezmoi.os "linux" }}
# Linux - Detect distribution and use appropriate package manager
info "🐧 Installing Linux packages..."

# Detect package manager
if command -v apt-get >/dev/null 2>&1; then
    PM="apt"
elif command -v dnf >/dev/null 2>&1; then
    PM="dnf"
elif command -v yum >/dev/null 2>&1; then
    PM="yum"
elif command -v pacman >/dev/null 2>&1; then
    PM="pacman"
elif command -v zypper >/dev/null 2>&1; then
    PM="zypper"
else
    error "No supported package manager found"
    exit 1
fi

info "Detected package manager: ${PM}"

# Update package lists
case "${PM}" in
    apt)
        sudo apt-get update -qq
        # Install essential packages from package definitions
        sudo apt-get install -y \
{{- range $pkg := (index .platform_packages.linux.debian "essential") }}
            {{ $pkg }} \
{{- end }}
        ;;
    dnf)
        # Install essential packages for Fedora/RHEL from package definitions
        sudo dnf install -y \
{{- range $pkg := (index .platform_packages.linux.fedora "essential") }}
            {{ $pkg }} \
{{- end }}
        ;;
    pacman)
        # Update and install for Arch from package definitions
        sudo pacman -Syu --noconfirm
        sudo pacman -S --noconfirm \
{{- range $pkg := (index .platform_packages.linux.arch "essential") }}
            {{ $pkg }} \
{{- end }}
        ;;
esac

success "Linux packages installed via ${PM}"

{{- else if eq .chezmoi.os "windows" }}
# Windows - Use winget or scoop
info "🪟 Installing Windows packages..."

if command -v winget >/dev/null 2>&1; then
    info "Using winget for package installation..."

    # Install packages from package definitions
{{- range $pkg := (index .platform_packages.windows "winget") }}
    winget install {{ $pkg }}
{{- end }}

    success "Windows packages installed via winget"

elif command -v scoop >/dev/null 2>&1; then
    info "Using scoop for package installation..."

    # Install packages from package definitions
    scoop install \
{{- range $pkg := (index .platform_packages.windows "scoop") }}
        {{ $pkg }} \
{{- end }}

    success "Windows packages installed via scoop"
else
    warn "Neither winget nor scoop found. Please install one of them first."
    info "To install scoop: iwr -useb get.scoop.sh | iex"
fi
{{- end }}

success "Platform-specific package installation complete!"
