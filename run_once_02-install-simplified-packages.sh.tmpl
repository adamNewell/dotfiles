#!/bin/bash
# Simplified package installation using mise + OS package manager + external downloads
# This replaces the complex multi-package-manager approach

set -e
set -o pipefail

# Colors for output  
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
success() { echo -e "${GREEN}✅ $1${NC}"; }
warn() { echo -e "${YELLOW}⚠️  $1${NC}"; }
error() { echo -e "${RED}❌ $1${NC}" >&2; }

# Activate mise for this script
export PATH="$HOME/.local/bin:$PATH"
if command -v mise >/dev/null 2>&1; then
    eval "$(mise activate bash)"
fi

# Track installation results
declare -a INSTALLED_TOOLS=()
declare -a FAILED_TOOLS=()

# Detect OS and package manager
detect_os_and_pm() {
    local os_type=""
    local package_manager=""
    
    if [[ "$(uname)" == "Darwin" ]]; then
        os_type="macos"
        if command -v brew >/dev/null 2>&1; then
            package_manager="brew"
        else
            error "Homebrew not found on macOS. Please install Homebrew first."
            return 1
        fi
    elif [[ "$(uname)" == "Linux" ]]; then
        os_type="linux"
        if command -v apt-get >/dev/null 2>&1; then
            package_manager="apt"
        elif command -v dnf >/dev/null 2>&1; then
            package_manager="dnf"
        elif command -v pacman >/dev/null 2>&1; then
            package_manager="pacman"
        else
            error "No supported package manager found (apt, dnf, pacman)"
            return 1
        fi
    else
        error "Unsupported operating system: $(uname)"
        return 1
    fi
    
    echo "${os_type}:${package_manager}"
}

# Install a single tool using the priority system
install_tool() {
    local tool_name="$1"
    local os_type="$2"
    local package_manager="$3"
    
    info "Installing ${tool_name}..."
    
    # Skip if already installed
    if command -v "${tool_name}" >/dev/null 2>&1; then
        success "${tool_name} already installed"
        INSTALLED_TOOLS+=("${tool_name}")
        return 0
    fi
    
    # Try mise first (if available and tool is supported)
    if command -v mise >/dev/null 2>&1; then
        local mise_package=""
        case "${tool_name}" in
            "eza"|"fd"|"ripgrep"|"bat"|"zoxide"|"fzf"|"jq"|"delta"|"sheldon")
                mise_package="${tool_name}"
                ;;
        esac
        
        if [[ -n "${mise_package}" ]]; then
            if mise install "${mise_package}" 2>/dev/null && command -v "${tool_name}" >/dev/null 2>&1; then
                success "${tool_name} installed via mise"
                INSTALLED_TOOLS+=("${tool_name}")
                return 0
            fi
        fi
    fi
    
    # Fall back to OS package manager
    local package_name=""
    case "${os_type}:${package_manager}:${tool_name}" in
        "macos:brew:eza") package_name="eza" ;;
        "macos:brew:fd") package_name="fd" ;;
        "macos:brew:ripgrep") package_name="ripgrep" ;;
        "macos:brew:bat") package_name="bat" ;;
        "macos:brew:zoxide") package_name="zoxide" ;;
        "macos:brew:fzf") package_name="fzf" ;;
        "macos:brew:jq") package_name="jq" ;;
        "macos:brew:delta") package_name="git-delta" ;;
        "macos:brew:sheldon") package_name="sheldon" ;;
        "linux:apt:eza") package_name="" ;;
        "linux:apt:fd") package_name="fd-find" ;;
        "linux:apt:ripgrep") package_name="ripgrep" ;;
        "linux:apt:bat") package_name="bat" ;;
        "linux:apt:zoxide") package_name="" ;;
        "linux:apt:fzf") package_name="fzf" ;;
        "linux:apt:jq") package_name="jq" ;;
        "linux:apt:delta") package_name="" ;;
        "linux:apt:sheldon") package_name="" ;;
        "linux:dnf:"*|"linux:pacman:"*) 
            # Similar mapping for dnf/pacman
            package_name="${tool_name}"
            ;;
    esac
    
    if [[ -n "${package_name}" ]]; then
        case "${package_manager}" in
            "brew")
                if brew install "${package_name}" 2>/dev/null; then
                    success "${tool_name} installed via Homebrew"
                    INSTALLED_TOOLS+=("${tool_name}")
                    return 0
                fi
                ;;
            "apt")
                if sudo apt-get install -y "${package_name}" 2>/dev/null; then
                    success "${tool_name} installed via apt"
                    INSTALLED_TOOLS+=("${tool_name}")
                    return 0
                fi
                ;;
            "dnf")
                if sudo dnf install -y "${package_name}" 2>/dev/null; then
                    success "${tool_name} installed via dnf"
                    INSTALLED_TOOLS+=("${tool_name}")
                    return 0
                fi
                ;;
            "pacman")
                if sudo pacman -S --noconfirm "${package_name}" 2>/dev/null; then
                    success "${tool_name} installed via pacman"
                    INSTALLED_TOOLS+=("${tool_name}")
                    return 0
                fi
                ;;
        esac
    fi
    
    # Try cargo for Rust-based tools
    if command -v cargo >/dev/null 2>&1; then
        # Source cargo env in case it was just installed
        [[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"
        
        local cargo_package=""
        case "${tool_name}" in
            "eza") cargo_package="eza" ;;
            "fd") cargo_package="fd-find" ;;
            "ripgrep") cargo_package="ripgrep" ;;
            "bat") cargo_package="bat" ;;
            "zoxide") cargo_package="zoxide" ;;
            "delta") cargo_package="git-delta" ;;
            "sheldon") cargo_package="sheldon" ;;
        esac
        
        if [[ -n "${cargo_package}" ]]; then
            info "Attempting to install ${tool_name} via cargo..."
            if cargo install "${cargo_package}" 2>/dev/null; then
                success "${tool_name} installed via cargo"
                INSTALLED_TOOLS+=("${tool_name}")
                return 0
            fi
        fi
    fi
    
    # If all else fails, rely on chezmoi external downloads
    warn "${tool_name} will be installed via external download (if configured)"
    FAILED_TOOLS+=("${tool_name}")
    return 1
}

# Install system packages
install_system_packages() {
    local os_type="$1"
    local package_manager="$2"
    
    info "Installing system packages for ${os_type}..."
    
    case "${os_type}:${package_manager}" in
        "macos:brew")
            local packages=(curl wget git tree tmux neovim openssh python3 node zsh zsh-completions oh-my-posh)
            for package in "${packages[@]}"; do
                if ! brew list "${package}" >/dev/null 2>&1; then
                    brew install "${package}" || warn "Failed to install ${package}"
                fi
            done
            ;;
        "linux:apt")
            sudo apt-get update -qq
            local packages=(build-essential curl wget git zsh tmux neovim tree unzip python3 python3-pip)
            sudo apt-get install -y "${packages[@]}" || warn "Some packages failed to install"
            ;;
        "linux:dnf")
            local packages=("@development-tools" curl wget git zsh tmux neovim tree unzip python3 python3-pip)
            sudo dnf install -y "${packages[@]}" || warn "Some packages failed to install"
            ;;
        "linux:pacman")
            local packages=(base-devel curl wget git zsh tmux neovim tree unzip python)
            sudo pacman -S --noconfirm "${packages[@]}" || warn "Some packages failed to install"
            ;;
    esac
    
    # Install Rust/Cargo as a core system package
    if ! command -v cargo >/dev/null 2>&1; then
        info "Installing Rust via rustup..."
        if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path; then
            # Source cargo env for current session
            source "$HOME/.cargo/env"
            success "Rust installed successfully"
        else
            warn "Failed to install Rust"
        fi
    else
        success "Rust/Cargo already installed"
    fi
    
    success "System packages installation completed"
}

# Install language versions via mise
install_languages() {
    if ! command -v mise >/dev/null 2>&1; then
        warn "mise not available, skipping language installations"
        return 0
    fi
    
    info "Installing language versions via mise..."
    
    # Install languages from simplified config
    local languages=("nodejs@22.11.0" "python@3.12.0" "golang@1.21.0")
    
    for lang in "${languages[@]}"; do
        if mise install "${lang}" 2>/dev/null; then
            success "Installed ${lang}"
        else
            warn "Failed to install ${lang}"
        fi
    done
    
    # Set global versions
    mise global nodejs@22.11.0 python@3.12.0 golang@1.21.0 2>/dev/null || warn "Failed to set global versions"
}

# Main installation process
main() {
    info "Starting simplified package installation..."
    
    # Detect OS and package manager
    local os_pm
    os_pm=$(detect_os_and_pm) || exit 1
    local os_type="${os_pm%:*}"
    local package_manager="${os_pm#*:}"
    
    info "Detected: ${os_type} with ${package_manager}"
    
    # Stage 1: Install system packages
    install_system_packages "${os_type}" "${package_manager}"
    
    # Stage 2: Install languages (if mise is available)
    install_languages
    
    # Stage 3: Install essential CLI tools
    info "Installing essential CLI tools..."
    local essential_tools=(eza fd ripgrep bat zoxide fzf jq delta sheldon)
    
    for tool in "${essential_tools[@]}"; do
        install_tool "${tool}" "${os_type}" "${package_manager}" || true
    done
    
    # Stage 4: Development tools (optional, only if not in minimal mode)
    if [[ "${DOTFILES_MINIMAL:-false}" != "true" ]]; then
        info "Installing development tools..."
        local dev_tools=(docker gh git-lfs)
        
        for tool in "${dev_tools[@]}"; do
            install_tool "${tool}" "${os_type}" "${package_manager}" || true
        done
    fi
    
    # Summary
    echo
    info "Installation Summary:"
    echo "✅ Successfully installed: ${#INSTALLED_TOOLS[@]} tools"
    if [[ ${#INSTALLED_TOOLS[@]} -gt 0 ]]; then
        printf "   - %s\n" "${INSTALLED_TOOLS[@]}"
    fi
    
    if [[ ${#FAILED_TOOLS[@]} -gt 0 ]]; then
        echo "⚠️  Failed/Skipped: ${#FAILED_TOOLS[@]} tools"
        printf "   - %s (may be installed via external downloads)\n" "${FAILED_TOOLS[@]}"
    fi
    
    success "Simplified package installation completed"
    
    # Reminder about external downloads
    if [[ ${#FAILED_TOOLS[@]} -gt 0 ]]; then
        info "Note: Failed tools may be available via chezmoi external downloads"
        info "Run 'chezmoi apply' to install external downloads"
    fi
}

# Execute main function
main "$@"