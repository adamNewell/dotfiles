#!/bin/bash
# Validate the complete dotfiles setup
# Final validation script that runs after all other setup scripts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}" >&2; }

# Track validation results
VALIDATION_ERRORS=0

check_command() {
    local cmd="$1"
    local description="$2"
    
    if command -v "$cmd" >/dev/null 2>&1; then
        success "$description: $cmd available"
    else
        warn "$description: $cmd not found"
        ((VALIDATION_ERRORS++))
    fi
}

info "üîç Validating dotfiles setup..."

# Check version managers
check_command "mise" "Version manager"

# Check essential tools
check_command "git" "Git version control"
check_command "zsh" "Zsh shell"

# Check modern CLI tools
check_command "eza" "Modern ls replacement"
check_command "bat" "Enhanced cat"
check_command "rg" "Fast grep replacement"
check_command "fd" "Modern find replacement"
check_command "fzf" "Fuzzy finder"
check_command "zoxide" "Smart cd replacement"

# Check shell tools
check_command "sheldon" "Zsh plugin manager"

# Check programming languages (if managed by mise)
if command -v mise >/dev/null 2>&1; then
    info "üìã Checking mise-managed tools..."
    
    # Check if mise tools are available
    if [[ -f "$HOME/.tool-versions" ]]; then
        success ".tool-versions file exists"
        
        # List installed tools
        if mise list 2>/dev/null | grep -q "nodejs"; then
            success "Node.js managed by mise"
        fi
        
        if mise list 2>/dev/null | grep -q "python"; then
            success "Python managed by mise"
        fi
    else
        warn ".tool-versions file not found"
        ((VALIDATION_ERRORS++))
    fi
fi

# Check shell configuration
info "üêö Checking shell configuration..."

{{- $configPath := "" }}
{{- if eq .chezmoi.os "darwin" }}
{{- $configPath = "/opt/homebrew/bin/zsh" }}
{{- else }}
{{- $configPath = "/usr/bin/zsh" }}
{{- end }}

# Check if zsh is the default shell
if [[ "$SHELL" == *"zsh"* ]]; then
    success "Zsh is the default shell"
else
    warn "Zsh is not the default shell (current: $SHELL)"
    info "Run: chsh -s $(which zsh)"
fi

# Check XDG directories
info "üìÅ Checking XDG directories..."
for dir in "${XDG_CONFIG_HOME:-$HOME/.config}" "${XDG_DATA_HOME:-$HOME/.local/share}" "${XDG_CACHE_HOME:-$HOME/.cache}" "${XDG_STATE_HOME:-$HOME/.local/state}"; do
    if [[ -d "$dir" ]]; then
        success "XDG directory exists: $dir"
    else
        warn "XDG directory missing: $dir"
    fi
done

# Check chezmoi integration
info "üè† Checking chezmoi setup..."
if command -v chezmoi >/dev/null 2>&1; then
    success "chezmoi is available"
    
    # Check if chezmoi source is correct
    if chezmoi source-path | grep -q "{{ .chezmoi.sourceDir }}"; then
        success "chezmoi source path is configured"
    fi
else
    error "chezmoi not found"
    ((VALIDATION_ERRORS++))
fi

# Summary
echo
if [[ $VALIDATION_ERRORS -eq 0 ]]; then
    success "üéâ All validations passed! Setup is complete."
    info "Next steps:"
    info "  1. Restart your shell or run: exec zsh"
    info "  2. Run 'sheldon lock' to update plugin cache"
    info "  3. Customize configurations as needed"
else
    warn "‚ö†Ô∏è  Setup completed with $VALIDATION_ERRORS warnings"
    info "Check the warnings above and install missing tools as needed"
fi

success "Validation complete!"